# privileged user ve service account'lari bulmak icin 3 adimli yontem izleyecegiz. Bunu da otomatize etmek mumkun degil
# cunku cluster'in ayakta kalmasi icin gerekli service-account ve kullanicilar var.
# Oncelikle alttaki komut ile tum clusterrole'leri inceliyoruz. Ä°clerinde kritik resource'lar uzerinde cok fazla yetkisi olanlarin ustune dusecegiz.
kubectl get clusterroles -o custom-columns='ROLENAME:.metadata.name,PERMISSIONS:rules[?(@.resources[0] == "*")]'

# ardindan bu clusterrole'ler hangi user veya serviceaccount'lara bind edilmis ogrenmek icin alttaki komut ile clusterrolebinding'lere bakiyoruz.
kubectl get clusterrolebindings -o custom-columns='ROLENAME:.roleRef.name,SUBJECTNAME:.subjects[*].name'

# bu iki komutun ardindan supheli bir durum gorursek bir sonraki asamaya geciyoruz.
# mesela nasil bir sey ariyoruz? tum resource'lar uzerinde tum islemleri yapmaya yetkili olan (apiGroups:[*] resources:[*] verbs:[*]) cluster-admin 
# rolunun "intruder" adinda bir service account'una bind edildigini bulmak gibi. 
# bir sonraki adim bu service account veya user kullanilarak kosan podlari bulmak ve incelemek
kubectl get pods -A -o yaml | grep -B30 "serviceAccount: intruder" | egrep 'namespace|name'


